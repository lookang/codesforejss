// code to be copied to EJSS source code under Custom and used in drawingPanel3D and plottingPanel2D
// address the problem is height difference is iOS app , epub, and Firefox
// user need to change only k and kepub
// copy %changeOrientation()% into the Height Field of drawingPanel3D and plottingPanel2D
function changeOrientation() {
 
var k =0.99 ; // k control height 1 is for full screen, 0.9 shorten etc
var kapple =0.95 // control apple app height
var kepub =0.95 ;
// check platform for Apps
try { // allow code to run in Student Learning Space 
  var iOSapp =  (typeof parent.device != 'undefined' && parent.device.platform == "iOS");
  var Androidapp = (typeof parent.device != 'undefined' && parent.device.platform == "Android");
} catch(e) {
  var iOSapp = false;
  var Androidapp = false;
}
// check platform for web browsers
var iOS =/iPad|iPhone|iPod/.test(navigator.userAgent) && !window.MSStream;
var iPad =/iPad/.test(navigator.userAgent) && !window.MSStream;
var iPhone = /iPhone|iPod/.test(navigator.userAgent) && !window.MSStream;
var Android= /Android|android/i.test(navigator.userAgent);

//navigator
var Firefox = navigator.userAgent.indexOf("Firefox") != -1;
 
switch (window.orientation) { // using window.orientation as deciding factor
  case 0:
  case 180:
    this.screenOrientation = 'portrait';
    if (iOSapp){ // does not seems to work
      
      return window.screen.height*kapple;  //0.1 for app and 0.1 for nonfullscreenapp  
    
    }
    else if (_isEPub){ // does not seems to work
      //   return Math.max(window.screen.width,window.screen.height)*0.9;
      return window.innerHeight*kepub;  //0.1 for app and 0.1 for nonfullscreenapp  
      // return window.screen.height;
      //  return window.innerHeight;
      // return document.documentElement.clientHeight;
    }
   
    else {
     
      return 100*k+"vh";
    }
    break;
  case 90:
  case -90:
    this.screenOrientation = 'landscape';
 
    if (iOSapp){ // App
      return window.screen.width*kapple;  
      // return window.screen.height;
      //  return window.innerHeight;
      //  return document.documentElement.clientHeight;
    }
    else if (_isEPub){ // does not seems to work
      //   return Math.max(window.screen.width,window.screen.height)*0.9;
      return window.innerHeight*kepub;  //0.1 for app and 0.1 for nonfullscreenapp  
      // return window.screen.height;
      //  return window.innerHeight;
      // return document.documentElement.clientHeight;
    }
   
    else {
      return 100*k+"vh";
      }
    break;
  default:
    this.screenOrientation = 'unknown';
    //       return (iPad)?""+(window.screen.width+window.screen.height)*0.4:((iPhone)?""+window.screen.width:_view._format(window.innerHeight*0.9,"0"));
     if (Firefox){
      return window.innerHeight*k;// number as of 20180831 Firefox does not support vh yet so need a separate line to handle
      }
   //   else if (iOS&&(window.orientation==0)||(window.orientation==180)){
   //   return  window.screen.height*k;// number as of 20180831 Firefox does not support vh yet so need a separate line to handle
   //   }
    //  else if (iOS&&(window.orientation==90)||(window.orientation==-90)){
   //   return  window.screen.width*k;// number as of 20180831 Firefox does not support vh yet so need a separate line to handle
   //   }
      else {
     //  alert();
       return 100*k+"%"; // string every other solid deployment, Android Android App web chrome etc works in EJSS6.0beta
        //  works in EjsS_5.3_180131
      //  window.innerHeight*k; // work on Chrome mobile
       
}

}
 
}
