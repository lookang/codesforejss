// code written by rytan451 20221006
// to be used in ejss custom library, create a new tab and copy paste copy inside
// EVENT START - to use paste something to start, needs to be intelligently find a good place to paste the next 3 lines
const questionName = "Q" + (interact + 1) //moodle
startQuestion(questionName); //moodle
addQuestionHistory(questions[0]); //moodle question[0] = Does it have a fixed shape?


// another way to START
 startQuestion("Q" + (interact + 1)); //moodle
 
 //award MARKS
 awardQuestionMarks(); //moodle
 
 //EVENT - END
 endQuestion();  //moodle

//HISTORY BEGIN
addQuestionHistory(questions[0]); //moodle question[0] = Does it have a fixed shape?

// HISTORY ADD
_addQuestionHistory("Q" + (interact + 1), animals[i] + " ❌"); //moodle


// to paste in CUSTOM FUNCTION of EJSS EDITOR
const _debugMode = false;
const questionStack = [];
const questionHistory = Object.create(null);

const _nullFunction = _debugMode ? 
  console.log
  :
  function(){};


// for assessment.json event - start
function startQuestion(questionName) {
  _view._addInteraction(_nullFunction, {action:"questionStart", name:questionName}, {element:"questionLib", property:"value"});
  questionStack.push(questionName);
}

// for assessment.json history
function _addQuestionHistory(questionName, history) {
  if (!(questionName in questionHistory)) {
    questionHistory[questionName] = [];
  }
  questionHistory[questionName].push(history);
}

function _getQuestionHistory(questionName) {
  if (questionName in questionHistory) {
    return questionHistory[questionName].join("\n");
  } else {
    return "";
  }
}

function addQuestionHistory(history) {
  if (questionStack.length > 0) {
    const questionName = questionStack[questionStack.length - 1];
    _addQuestionHistory(questionName, history);
  }
}

// for assessment.json event - states
function onAnswer(answer, isCorrect=false, history=answer) {
  if (questionStack.length > 0) {
    const explainer = {};
    //explainer[true] = " (correct)";
    explainer[true] = " ✅"; // added unicode
    //explainer[false] = " (incorrect)";
    explainer[false] = " ❌"; // added unicode
    const questionName = questionStack[questionStack.length - 1];

    _addQuestionHistory(questionName, history + explainer[isCorrect]);
    const outputHistory = _getQuestionHistory(questionName);

    _view._addInteraction(_nullFunction, {name:questionName, answer:answer, isCorrect:isCorrect, action:"questionAnswer"}, {property: "answer", element:"questionLib"});
    _view._addInteraction(_nullFunction, outputHistory, {property: "history", element: "questionLib"});
  }
}

// for assessment.json event - end
function endQuestion() {
  if (questionStack.length > 0) {
    const questionName = questionStack.pop();
    _view._addInteraction(_nullFunction, {action:"questionEnd", name:questionName}, {element: "questionLib", property: "value"});
  }
}


// for assessment.json marks
function awardQuestionMarks(marks=1) {
  if (questionStack.length > 0) {
    const questionName = questionStack[questionStack.length - 1];
    _view._addInteraction(_nullFunction, marks, {element:"questionLib", property:"awardMarkFor"+questionName});
  }
}
